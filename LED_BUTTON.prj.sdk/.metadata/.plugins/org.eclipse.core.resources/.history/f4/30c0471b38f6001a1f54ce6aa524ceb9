/*
 * LED_test.c
 *
 *  Created on: 	13 June 2013
 *      Author: 	Ross Elliot
 *     Version:		1.2
 */

/********************************************************************************************
* VERSION HISTORY
********************************************************************************************
*   v1.3 - 13 September 2020
*       Integrated the button definitions and setup from interrupt_controller_tut_2B.c
*
* 	v1.2 - 13 February 2015
* 		Modified for Zybo Development Board ~ DN
*
* 	v1.1 - 27 January 2014
* 		GPIO_DEVICE_ID definition updated to reflect new naming conventions in Vivado 2013.3
*		onwards.
*
*	v1.0 - 13 June 2013
*		First version created.
*******************************************************************************************/

/********************************************************************************************
 * This file contains an example of using the GPIO driver to provide communication between
 * the Zynq Processing System (PS) and the AXI GPIO block implemented in the Zynq Programmable
 * Logic (PL). The AXI GPIO is connected to the LEDs on the Zybo.
 *
 * The provided code demonstrates how to use the GPIO driver to write to the memory mapped AXI
 * GPIO block, which in turn controls the LEDs.
 ********************************************************************************************/

/* Include Files */
#include "xparameters.h"
#include "xgpio.h"
#include "xstatus.h"
#include "xil_printf.h"

/* Definitions */
#define BTNS_DEVICE_ID		XPAR_AXI_GPIO_0_DEVICE_ID
#define GPIO_DEVICE_ID  XPAR_AXI_GPIO_1_DEVICE_ID	/* GPIO device that LEDs are connected to */
#define LED 0b0000									/* Initial LED value - X00X */
#define LED_DELAY 20000000							/* Software delay length (twice for visualization) */
#define LED_CHANNEL 1								/* GPIO port for LEDs */
#define printf xil_printf							/* smaller, optimised printf */

XGpio BTNInst;									/* GPIO Device driver instance for buttons */
XGpio LEDInst;									/* GPIO Device driver instance for LEDs */

int LEDOutputExample(void)
{

	volatile int Delay;
	int Status;
	int inc = 0;	/* Increment for the LED counter */
	int led = LED; /* Hold current LED value. Initialise to LED definition */
	int btn;	/* Hold current button value */

	/* the possible states of the finite state machine
	 *   INIT = initial state, all LEDs off
	 *   COUNT1 = count by ones,
	 *   COUNT2 = count by twos,
	 *   COUNT4 = count by fours,
	 *   SUSPEND = keep LEDs in last stage,
	 *   SET = all LEDs on */
	enum { INIT, COUNT1, COUNT2, COUNT4, SUSPEND, SET } state;

		//----------------------------------------------------
		// INITIALIZE THE PERIPHERALS & SET DIRECTIONS OF GPIO
		//----------------------------------------------------
		/* GPIO driver initialisation */
		Status = XGpio_Initialize(&LEDInst, GPIO_DEVICE_ID);
		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
		}
		// Initialise Push Buttons
		Status = XGpio_Initialize(&BTNInst, BTNS_DEVICE_ID);
		if(Status != XST_SUCCESS) return XST_FAILURE;
		// Set LEDs direction to outputs
		XGpio_SetDataDirection(&LEDInst, 1, 0x00);
		// Set all buttons direction to inputs
		XGpio_SetDataDirection(&BTNInst, 1, 0xFF);

		/*Set the direction for the LEDs to output. */
		XGpio_SetDataDirection(&LEDInst, LED_CHANNEL, 0x0);

		/* Loop forever blinking the LED. */
			while (1) {
				/* Write output to the LEDs. */
				XGpio_DiscreteWrite(&LEDInst, LED_CHANNEL, led);
				/* Read input from the switches. */
				btn = XGpio_DiscreteRead(&BTNInst, 1);

				/* state logic */
				switch (state) {
					case INIT:
						inc = 0;
						led = 0b0000;
						/* count by 1s if no buttons pressed */
						if (btn == 0b0000) {
							state = COUNT1;
						}
					break; /* case INIT */

					case COUNT1:
						inc = 1;
						switch (btn) {
							/* initialize again if button 1 is pressed */
							case 0b0010:
								state = INIT;
							break; /* case 0b0010 */
							/* suspend if buttons 3 and 0 are pressed */
							case 0b1001:
								state = SUSPEND;
							break; /* case 0b1001 */
							/* set if button 2 is pressed */
							case 0b1001:
								state = SET;
							break; /* case 0b1001 */
							default: break;
						} /* end switch (btn) */
					break; /* case COUNT1 */

					case SUSPEND:
						inc = 0;
						switch (btn) {
							/* count by 2s if button 3 is released */
							case 0b0001:
								state = COUNT2;
							break; /* case 0b0001 */
							/* count by 4s if button 0 is released */
							case 0b1000:
								inc = COUNT4;
							break; /* case 0b1000 */
							default: break;
						} /* switch (btn) */
					break; /* case SUSPEND */

					case SET:
						inc = 0;
						led = 0b1111;
						/* count by 1s if no buttons pressed */
						if (btn == 0b0000) {
							state = COUNT1;
						}
					break;

					case COUNT2:
						inc = 2;
						switch (btn) {
							/* suspend if button 3 pressed again */
							case 0b1001:
								state = SUSPEND;
							break; /* case 0b1001 */
							/* count by ones if button 0 also released */
							case 0b0000:
								state = COUNT1;
							break;
							default: break;
						}
					break;

					case COUNT4:
						inc = 4;
						switch (btn) {
							/* suspend if button 0 pressed again */
							case 0b1001:
								state = SUSPEND;
							break; /* case 0b1001 */
							/* count by ones if button 3 also released */
							case 0b0000:
								state = COUNT1;
							break;
							default: break;
						}
					break;

					default: break;
				}

				/* priority logic */
				led += inc;

				/* Wait a small amount of time so that the LED blinking is visible. */
				for (Delay = 0; Delay < LED_DELAY; Delay++);
			}

		return XST_SUCCESS; /* Should be unreachable */
}

/* Main function. */
int main(void){

	int Status;

	/* Execute the LED output. */
	Status = LEDOutputExample();
	if (Status != XST_SUCCESS) {
		xil_printf("GPIO output to the LEDs failed!\r\n");
	}

	return 0;
}

